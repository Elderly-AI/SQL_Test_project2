!function(e){var t={};function s(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(r,a,function(t){return e[t]}.bind(null,a));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="/",s(s.s=0)}([function(e,t,s){e.exports=s(1)},function(e,t,s){(function(e){let t=s(3)({logger:!0});t.register(s(4),{connectionString:"postgres://docker:docker@localhost:5432/docker"}),t.addContentTypeParser("application/json",{parseAs:"string"},(function(e,t,s){try{let e={};t&&(e=JSON.parse(t)),s(null,e)}catch(e){e.statusCode=400,s(e,void 0)}})),t.post("/api/forum/create",(async function(e,t){let s=new n(e.body);const a=await i.getUsersByNickname({nickname:s.user});if(!a.length)return r(t,404,{message:"user not found"});const o=await u.getForumBySlug(s);if(o.length)return r(t,409,new n(o[0]).get());return s.user=a[0].nickname,await u.createNewForum(s),r(t,201,s.get())})),t.post("/api/forum/:slug/create",(async function(e,t){let s=new o(e.body);if(!(await i.getUsersByNickname({nickname:s.author})).length)return r(t,404,{message:"user not found"});const a=await u.getForumBySlug({slug:e.params.slug});if(!a.length)return r(t,404,{message:"forum not found"});const n=await c.getThreadBySlugOrTitle(s);if(n.length)return r(t,409,n[0]);s.forum=a[0].slug,await c.createThread(s);const d=await c.getThreadBySlugOrTitle(s);a[0].threads+=1,await u.modifyForum(a[0]);const l=await p.getMatchFromUsersForum({nickname:s.author,forum:e.params.slug});console.log("MATCH",l),l.length||await p.addUserToUsersForum({nickname:s.author,forum:e.params.slug});return r(t,201,d[0])})),t.get("/api/forum/:slug/details",(async function(e,t){let s=new n;s.slug=e.params.slug;const a=await u.getForumBySlug(s);if(a.length)return r(t,200,new n(a[0]).get());return r(t,404,{message:"forum not found"})})),t.get("/api/forum/:slug/threads",(async function(e,t){let s=new n;if(s.slug=e.params.slug,s.desc="true"===e.query.desc,s.limit=e.query.limit?e.query.limit:100,s.since=e.query.since,!(await u.getForumBySlug(s)).length)return r(t,404,{message:"thread not found"});const a=await u.getThreadsFromForum(s);return r(t,200,a)})),t.get("/api/forum/:slug/users",(async function(e,t){let s={};if(s.forum=e.params.slug,s.limit=e.query.limit?e.query.limit:100,s.since=e.query.since,s.desc="true"===e.query.desc,!(await u.getForumBySlug({slug:s.forum})).length)return r(t,404,{message:"forum not found"});const a=await p.getUsersFromForum(s);return r(t,200,a)})),t.post("/api/post/:id/details",(async function(e,t){let s={};s.message=e.body.message,s.id=e.params.id;let a=await d.getPostById(s.id);if(!a.length)return r(t,404,{message:"post not found"});s.message&&s.message!==a[0].message&&(await d.modifyPost(s),a[0].isEdited=!0,a[0].message=s.message);return delete a[0].level,r(t,200,a[0])})),t.get("/api/post/:id/details",(async function(e,t){const s=e.params.id,a=e.query&&e.query.related?e.query.related.split(","):[];let n={};const o=await d.getPostById(s);if(!o.length)return r(t,404,{message:"post not found"});if(delete o[0].level,n.post=o[0],a.includes("thread")){const e=await c.getThreadBySlugOrId(n.post.thread);n.thread=e[0]}if(a.includes("forum")){const e=await u.getForumBySlug({slug:n.post.forum});n.forum=e[0],n.forum.user=n.forum.username,delete n.forum.username}if(a.includes("user")){const e=await i.getUsersByNickname({nickname:n.post.author});n.author=e[0]}return n.post.isEdited=n.post.isedited,delete n.post.isedited,r(t,200,n)})),t.post("/api/service/clear",(async function(e,s){const a=await t.pg.connect();return await a.query("TRUNCATE users, forums, threads, posts, votes"),a.release(),r(s,200,null)})),t.get("/api/service/status",(async function(e,t){const s=await m.getUserStatus(),a=await m.getForumStatus(),n=await m.getThreadStatus(),o=await m.getPostStatus();return r(t,200,Object.assign({},a,o,n,s))})),t.post("/api/thread/:slug_or_id/create",(async function(e,t){let s=e.body;const a=e.params.slug_or_id,n=new Date,o=await c.getThreadBySlugOrId(a);if(!o.length)return r(t,404,{message:"thread not found"});for(let e of s){const s=await i.getUsersByNickname({nickname:e.author});if(!s.length)return console.log("NOT FOUND",s),r(t,404,{message:"user not found"});if(e.parent){const s=await d.getPostById(e.parent);if(!s.length)return r(t,409,{message:"post parent not found"});if(o[0].id!==s[0].thread)return r(t,409,{message:"another thread"});e.level=s[0].level+1,e.tree=s[0].tree,e.path=s[0].path+Date.now().toString(36)}else e.tree=Date.now(),e.level=0,e.path=Date.now().toString(36),e.parent=0;e.thread=o[0].id,e.forum=o[0].forum,e.created=n.toISOString(),e.id=await d.createPosts(e),(await p.getMatchFromUsersForum({nickname:e.author,forum:e.forum})).length||await p.addUserToUsersForum({nickname:e.author,forum:e.forum})}const l=await u.getForumBySlug({slug:o[0].forum});return l[0].posts+=s.length,await u.modifyForum(l[0]),r(t,201,s)})),t.get("/api/thread/:slug_or_id/details",(async function(e,t){const s=e.params.slug_or_id,a=await c.getThreadBySlugOrId(s);if(!a.length)return r(t,404,{message:"thread not found"});return r(t,200,a[0])})),t.post("/api/thread/:slug_or_id/details",(async function(e,t){const s=e.body,a=e.params.slug_or_id;let n=await c.getThreadBySlugOrId(a);if(!n.length)return r(t,404,{message:"thread not found"});return n[0].message=s.message?s.message:n[0].message,n[0].title=s.title?s.title:n[0].title,await c.modifyThread(n[0]),r(t,200,n[0])})),t.get("/api/thread/:slug_or_id/posts",(async function(e,t){let s={};s.slug_or_id=e.params.slug_or_id,s.sort=e.query&&e.query.sort?e.query.sort.split(","):[],s.limit=e.query.limit?e.query.limit:100,s.since=e.query.since,s.desc="true"===e.query.desc;const a=await c.getThreadBySlugOrId(s.slug_or_id);if(!a.length)return r(t,404,{message:"thread not found"});if(s.id=a[0].id,s.sort.includes("parent_tree")){console.log("TESTING",await c.test(s));const e=await c.getPostsParentTree(s);return r(t,200,e)}if(s.sort.includes("tree")){const e=await c.getPostsTree(s);return r(t,200,e)}const n=await c.getPostsFromThread(s);return r(t,200,n)})),t.post("/api/thread/:slug_or_id/vote",(async function(e,t){let s=e.body;s.thread=e.params.slug_or_id;let a=await c.getThreadBySlugOrId(s.thread);if(!a.length)return r(t,404,{message:"thread not found"});if(!(await i.getUsersByNickname({nickname:s.nickname})).length)return r(t,404,{message:"user not found"});s.thread=a[0].id;const n=await l.getVoteBySlugOrIdAndNickname(s);n.length?(a[0].votes=a[0].votes-n[0].voice+s.voice,await l.modifyVote(s)):(a[0].votes+=s.voice,await l.createVote(s));return await c.modifyThread(a[0]),r(t,200,a[0])})),t.post("/api/user/:nickname/create",(async function(e,t){let s=new a(e.body);s.nickname=e.params.nickname;const n=await i.getUsersByNicknameOrEmail(s);if(n.length>0)return r(t,409,n);return await i.createUser(s),r(t,201,s.get())})),t.get("/api/user/:nickname/profile",(async function(e,t){let s=new a(e.body);s.nickname=e.params.nickname;const n=await i.getUsersByNickname(s);if(n.length)return r(t,200,n[0]);return r(t,404,{message:"user not found"})})),t.post("/api/user/:nickname/profile",(async function(e,t){let s=new a(e.body);s.nickname=e.params.nickname;const n=await i.getUsersByNicknameOrEmail(s);if(n.length>1)return r(t,409,{message:"conflict update user"});if(n.length<1)return r(t,404,{message:"user not found"});return s.updateInstance(n[0]),await i.modifyUser(s),r(t,200,s.get())}));function r(e,t,s){return e.code(t),s}class a{constructor(e){this._instance=e||{}}updateInstance(e){for(let t in e)this[t]||(this[t]=e[t])}set about(e){this._instance.about=e}set email(e){this._instance.email=e}set fullname(e){this._instance.fullname=e}set nickname(e){this._instance.nickname=e}get about(){return this._instance.about}get email(){return this._instance.email}get fullname(){return this._instance.fullname}get nickname(){return this._instance.nickname}get(){return this._instance}}class n{constructor(e){this._instance=e||{},this._clearInstance()}_clearInstance(){"username"in this._instance&&(this.user=this._instance.username,delete this._instance.username)}set posts(e){this._instance.posts=e}set slug(e){this._instance.slug=e}set threads(e){this._instance.threads=e}set title(e){this._instance.title=e}set user(e){this._instance.user=e}set limit(e){this._limit=e}set since(e){this._since=e}set desc(e){this._desc=e}get posts(){return this._instance.posts}get slug(){return this._instance.slug}get threads(){return this._instance.threads}get title(){return this._instance.title}get user(){return this._instance.user}get limit(){return this._limit}get since(){return this._since}get desc(){return this._desc}get(){return this._instance}}class o{constructor(e){this._instance=e||{}}set author(e){this._instance.author=e}set created(e){this._instance.created=e}set forum(e){this._instance.forum=e}set id(e){this._instance.id=e}set message(e){this._instance.message=e}set slug(e){this._instance.slug=e}set title(e){this._instance.title=e}set votes(e){this._instance.votes=e}get author(){return this._instance.author}get created(){return this._instance.created}get forum(){return this._instance.forum}get id(){return this._instance.id}get message(){return this._instance.message}get slug(){return this._instance.slug}get title(){return this._instance.title}get votes(){return this._instance.votes}get(){return this._instance}}class i{static async getUsersByNicknameOrEmail(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT about, email, fullname, nickname FROM users WHERE LOWER(email)=LOWER($1) OR LOWER(nickname)=LOWER($2)",[e.email,e.nickname]);return s.release(),r}static async getUsersByNickname(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT about, email, fullname, nickname FROM users WHERE LOWER(nickname)=LOWER($1)",[e.nickname]);return s.release(),r}static async getUsersByEmail(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT about, email, fullname, nickname FROM users WHERE LOWER(email)=LOWER($1)",[e.email]);return s.release(),r}static async createUser(e){const s=await t.pg.connect();await s.query("INSERT INTO users(about, email, fullname, nickname) VALUES($1,$2,$3,$4)",[e.about,e.email,e.fullname,e.nickname]),s.release()}static async modifyUser(e){const s=await t.pg.connect();await s.query("UPDATE users SET about=$1, email=$2, fullname=$3 WHERE LOWER(nickname) = LOWER($4)",[e.about,e.email,e.fullname,e.nickname]),s.release()}}class u{static async getForumBySlug(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT posts, slug, threads, title, username FROM forums WHERE LOWER(forums.slug) = LOWER($1)",[e.slug]);return s.release(),r}static async getThreadsFromForum(e){const s=await t.pg.connect();if(e.desc&&e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(forum) = LOWER($3) AND threads.created <= $1 ORDER BY threads.created DESC LIMIT $2 ",[e.since,e.limit,e.slug]);return s.release(),t}if(!e.desc&&e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(forum) = LOWER($3) AND threads.created >= $1 ORDER BY threads.created LIMIT $2 ",[e.since,e.limit,e.slug]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(forum) = LOWER($2) ORDER BY threads.created DESC LIMIT $1 ",[e.limit,e.slug]);return s.release(),t}const{rows:r}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(forum) = LOWER($2) ORDER BY threads.created LIMIT $1 ",[e.limit,e.slug]);return s.release(),r}static async createNewForum(e){const s=await t.pg.connect();await s.query("INSERT INTO forums(posts, slug, threads, title, username) VALUES($1,$2,$3,$4,$5)",[e.posts,e.slug,e.threads,e.title,e.user]),s.release()}static async modifyForum(e){const s=await t.pg.connect();await s.query("UPDATE forums SET posts=$1, slug=$2, threads=$3, title=$4, username=$5 WHERE LOWER(slug) = LOWER($2)",[e.posts,e.slug,e.threads,e.title,e.username]),s.release()}}class c{static async createThread(e){const s=await t.pg.connect();await s.query("INSERT INTO threads(author, created, forum, message, slug, title, votes) VALUES($1,$2,$3,$4,$5,$6,$7)",[e.author,e.created,e.forum,e.message,e.slug,e.title,e.votes]),s.release()}static async getThreadBySlugOrTitle(e){const s=await t.pg.connect();if(e.slug){const{rows:t}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(threads.slug) = LOWER($1)",[e.slug]);return s.release(),t}const{rows:r}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(threads.title) = LOWER($1)",[e.title]);return s.release(),r}static async getThreadBySlugOrId(e){const s=await t.pg.connect();if(isNaN(e)){const{rows:t}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE LOWER(threads.slug) = LOWER($1)",[e]);return s.release(),t}const{rows:r}=await s.query("SELECT author, created, forum, id, message, slug, title, votes FROM threads WHERE threads.id = $1",[e]);return s.release(),r}static async modifyThread(e){const s=await t.pg.connect(),{rows:r}=await s.query("UPDATE threads SET author=$1, created=$2, forum=$3, message=$4, slug=$5, title=$6, votes=$7 WHERE threads.id = $8 ",[e.author,e.created,e.forum,e.message,e.slug,e.title,e.votes,e.id]);return s.release(),r}static async getFlatPostsFromThread(e){const s=await t.pg.connect();if(e.desc&&e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM threads JOIN posts ON threads.id=posts.thread WHERE threads.id=$2 AND posts.id > $3 ORDER BY posts.created, posts.id DESC LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),t}if(!e.desc&&e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM threads JOIN posts ON threads.id=posts.thread WHERE threads.id=$2 AND posts.id > $3 ORDER BY posts.created, posts.id ASC LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM threads JOIN posts ON threads.id=posts.thread WHERE threads.id=$2 ORDER BY posts.created, posts.id DESC LIMIT $1 ",[e.limit,e.id]);return s.release(),t}const{rows:r}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM threads JOIN posts ON threads.id=posts.thread WHERE threads.id=$2 ORDER BY posts.created, posts.id ASC LIMIT $1 ",[e.limit,e.id]);return s.release(),r}static async getPostsFromThread(e){const s=await t.pg.connect();if(e.desc&&e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 AND posts.id < $3 ORDER BY posts.id DESC LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),t}if(!e.desc&&e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 AND posts.id > $3 ORDER BY posts.id ASC LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 ORDER BY posts.id DESC LIMIT $1 ",[e.limit,e.id]);return s.release(),t}const{rows:r}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 ORDER BY posts.id ASC LIMIT $1 ",[e.limit,e.id]);return s.release(),r}static async getPostsTree(e){const s=await t.pg.connect();if(!e.desc&&!e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 ORDER BY posts.path LIMIT $1 ",[e.limit,e.id]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 ORDER BY posts.tree DESC, posts.path DESC LIMIT $1 ",[e.limit,e.id]);return s.release(),t}if(e.desc&&e.since){const{rows:t}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 AND posts.path < (SELECT posts.path FROM posts WHERE posts.id = $3) ORDER BY posts.tree DESC, posts.path DESC LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),t}const{rows:r}=await s.query("SELECT posts.author, posts.created, posts.forum, posts.id, posts.isEdited, posts.message, posts.parent, posts.thread FROM posts WHERE posts.thread=$2 AND posts.path > (SELECT posts.path FROM posts WHERE posts.id = $3) ORDER BY posts.path LIMIT $1 ",[e.limit,e.id,e.since]);return s.release(),r}static async test(e){if(e.desc&&e.since){const s=await t.pg.connect(),{rows:r}=await s.query("(SELECT ARRAY (SELECT posts.tree from posts WHERE posts.thread = $2 AND posts.parent = 0 AND posts.path < (SELECT posts.path FROM posts WHERE posts.id = $3) ORDER BY posts.tree DESC LIMIT $1)) ",[e.limit,e.id,e.since]);return s.release(),r}return"nope"}static async getPostsParentTree(e){const s=await t.pg.connect();if(!e.desc&&!e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, isEdited, message, parent, thread FROM posts WHERE posts.thread=$2 AND ARRAY[posts.tree] && (SELECT ARRAY (SELECT posts.tree from posts WHERE posts.thread = $2 AND posts.parent = 0 ORDER BY posts.tree LIMIT $1)) ORDER BY posts.path",[e.limit,e.id]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, isEdited, message, parent, thread FROM posts WHERE posts.thread=$2 AND ARRAY[posts.tree] && (SELECT ARRAY (SELECT posts.tree from posts WHERE posts.thread = $2 AND posts.parent = 0 ORDER BY posts.tree DESC LIMIT $1)) ORDER BY posts.tree DESC, posts.path",[e.limit,e.id]);return s.release(),t}if(e.desc&&e.since){const{rows:t}=await s.query("SELECT author, created, forum, id, isEdited, message, parent, thread FROM posts WHERE posts.thread=$2 AND ARRAY[posts.tree] && (SELECT ARRAY (SELECT posts.tree from posts WHERE posts.thread = $2 AND posts.parent = 0 AND posts.path < lpad((SELECT posts.path FROM posts WHERE posts.id = $3),length(posts.path)) ORDER BY posts.tree DESC LIMIT $1)) ORDER BY posts.tree DESC, posts.path",[e.limit,e.id,e.since]);return s.release(),t}const{rows:r}=await s.query("SELECT author, created, forum, id, isEdited, message, parent, thread FROM posts WHERE posts.thread=$2 AND ARRAY[posts.tree] && (SELECT ARRAY (SELECT posts.tree from posts WHERE posts.thread = $2 AND posts.parent = 0 AND posts.path > lpad((SELECT posts.path FROM posts WHERE posts.id = $3),length(posts.path)) ORDER BY posts.tree LIMIT $1)) ORDER BY posts.tree, posts.path",[e.limit,e.id,e.since]);return s.release(),r}}class d{static async createPosts(e){const s=await t.pg.connect(),{rows:r}=await s.query("INSERT INTO posts(author, created, forum, isEdited, message, parent, thread, level, tree, path) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) RETURNING posts.id",[e.author,e.created,e.forum,e.isEdited,e.message,e.parent,e.thread,e.level,e.tree,e.path]);return s.release(),r[0].id}static async getPostById(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT * FROM posts WHERE posts.id = $1",[e]);return s.release(),r}static async modifyPost(e){const s=await t.pg.connect();await s.query("UPDATE posts SET message=$1, isEdited=$2WHERE posts.id = $3",[e.message,!0,e.id])}}class l{static async getVoteBySlugOrIdAndNickname(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT nickname, voice, thread FROM votes WHERE LOWER(votes.thread) = LOWER($1) AND LOWER(votes.nickname) = LOWER($2)",[e.thread,e.nickname]);return s.release(),r}static async createVote(e){const s=await t.pg.connect();await s.query("INSERT INTO votes(nickname, voice, thread) VALUES($1,$2,$3)",[e.nickname,e.voice,e.thread]),s.release()}static async modifyVote(e){const s=await t.pg.connect();await s.query("UPDATE votes SET nickname=$1, voice=$2, thread=$3 WHERE LOWER(votes.thread) = LOWER($3)",[e.nickname,e.voice,e.thread]),s.release()}}class m{static async getUserStatus(){const e=await t.pg.connect(),{rows:s}=await e.query("SELECT COUNT(*) AS user FROM users");return e.release(),s[0].user=Number(s[0].user),s[0]}static async getForumStatus(){const e=await t.pg.connect(),{rows:s}=await e.query("SELECT COUNT(*) AS forum FROM forums");return e.release(),s[0].forum=Number(s[0].forum),s[0]}static async getThreadStatus(){const e=await t.pg.connect(),{rows:s}=await e.query("SELECT COUNT(*) AS thread FROM threads");return e.release(),s[0].thread=Number(s[0].thread),s[0]}static async getPostStatus(){const e=await t.pg.connect(),{rows:s}=await e.query("SELECT COUNT(*) AS post FROM posts");return e.release(),s[0].post=Number(s[0].post),s[0]}}class p{static async getMatchFromUsersForum(e){const s=await t.pg.connect(),{rows:r}=await s.query("SELECT nickname, forum FROM forum_users WHERE LOWER(nickname)=LOWER($1) AND LOWER(forum)=LOWER($2)",[e.nickname,e.forum]);return s.release(),r}static async addUserToUsersForum(e){const s=await t.pg.connect();await s.query("INSERT INTO forum_users(nickname, forum) VALUES($1,$2)",[e.nickname,e.forum]),s.release()}static async getUsersFromForum(e){const s=await t.pg.connect();if(e.desc&&e.since){const{rows:t}=await s.query('SELECT users.about, users.email, users.fullname, users.nickname FROM forum_users JOIN users ON LOWER(forum_users.nickname)=LOWER(users.nickname) WHERE LOWER(forum_users.forum)=LOWER($1) AND LOWER(users.nickname COLLATE "C") < LOWER($3 COLLATE "C") ORDER BY LOWER(users.nickname) COLLATE "C" DESC LIMIT $2',[e.forum,e.limit,e.since]);return s.release(),t}if(!e.desc&&e.since){const{rows:t}=await s.query('SELECT users.about, users.email, users.fullname, users.nickname FROM forum_users JOIN users ON LOWER(forum_users.nickname)=LOWER(users.nickname) WHERE LOWER(forum_users.forum)=LOWER($1) AND LOWER(users.nickname COLLATE "C") > LOWER($3 COLLATE "C") ORDER BY LOWER(users.nickname) COLLATE "C" ASC LIMIT $2',[e.forum,e.limit,e.since]);return s.release(),t}if(e.desc&&!e.since){const{rows:t}=await s.query('SELECT users.about, users.email, users.fullname, users.nickname FROM forum_users JOIN users ON LOWER(forum_users.nickname)=LOWER(users.nickname) WHERE LOWER(forum_users.forum)=LOWER($1) ORDER BY LOWER(users.nickname) COLLATE "C" DESC LIMIT $2',[e.forum,e.limit]);return s.release(),t}const{rows:r}=await s.query('SELECT users.about, users.email, users.fullname, users.nickname FROM forum_users JOIN users ON LOWER(forum_users.nickname)=LOWER(users.nickname) WHERE LOWER(forum_users.forum)=LOWER($1) ORDER BY LOWER(users.nickname) COLLATE "C" ASC LIMIT $2',[e.forum,e.limit]);return s.release(),r}}(async()=>{try{await t.listen(5e3,"0.0.0.0"),t.log.info(`server listening on ${t.server.address().port}`)}catch(s){t.log.error(s),e.exit(1)}})()}).call(this,s(2))},function(e,t){var s,r,a=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,c=[],d=!1,l=-1;function m(){d&&u&&(d=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!d){var e=i(m);d=!0;for(var t=c.length;t;){for(u=c,c=[];++l<t;)u&&u[l].run();l=-1,t=c.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function E(e,t){this.fun=e,this.array=t}function g(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)t[s-1]=arguments[s];c.push(new E(e,t)),1!==c.length||d||i(p)},E.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=g,a.addListener=g,a.once=g,a.off=g,a.removeListener=g,a.removeAllListeners=g,a.emit=g,a.prependListener=g,a.prependOnceListener=g,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t){e.exports=require("fastify")},function(e,t){e.exports=require("fastify-postgres")}]);